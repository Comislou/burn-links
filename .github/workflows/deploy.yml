name: Deploy to Cloudflare

on:
  workflow_dispatch:


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy to Cloudflare
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      
      - name: Install Dependencies
        run: npm i

      # Automatically get an account id via the API Token
      # if secrets.CLOUDFLARE_ACCOUNT_ID is not set.
      - name: Fetch Account ID
        id: fetch_account_id
        run: |
          if [[ -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]]; then
            ACCOUNT_ID="${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
            echo "Using provided CLOUDFLARE_ACCOUNT_ID from secrets."
          else
            ACCOUNT_ID=$(curl -X GET "https://api.cloudflare.com/client/v4/accounts" -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" -H "Content-Type:application/json" | jq ".result[0].id" -r)
            if [[ "$ACCOUNT_ID" == "null" ]]; then
              echo "Failed to get an account id, please make sure you have set up CLOUDFLARE_API_TOKEN correctly!"
              exit 1
            fi
          fi
          echo 'account_id='$ACCOUNT_ID >> $GITHUB_OUTPUT

        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Generate wrangler.toml from template
        run: |
          sed -e "s/__WORKER_NAME__/${{ secrets.WORKER_NAME }}/g" \
            -e "s/__KV_NAMESPACE_ID__/${{ secrets.CF_KV_NAMESPACE_ID }}/g" \
            wrangler.toml.example > wrangler.toml
          if [[ -n "${{ secrets.CUSTOM_DOMAIN }}" ]]; then
            echo "Setting custom domain to ${{ secrets.CUSTOM_DOMAIN }}"
            echo -e "\n[[routes]]\n \
              pattern = \"${{ secrets.CUSTOM_DOMAIN }}\"\n \
              custom_domain = true" \
              >> wrangler.toml
          fi

      - name: Deploy to Cloudflare
        run: npm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}